@model ABCRetailers.Models.ViewModels.OrderCreateViewModel

@{
    ViewData["Title"] = "Create New Order";
}

<div class="container-fluid">
    <div class="row">
        <div class="col-lg-8">
            <div class="card">
                <div class="card-header">
                    <h3><i class="fas fa-plus-circle me-2"></i>Create New Order</h3>
                </div>
                <div class="card-body">
                    <form asp-action="Create" method="post" id="orderForm">
                        @Html.AntiForgeryToken()

                        <div asp-validation-summary="ModelOnly" class="alert alert-danger" role="alert"></div>

                        <div class="row">
                            <!-- Customer Selection -->
                            <div class="col-md-6 mb-3">
                                <label asp-for="CustomerId" class="form-label">
                                    <i class="fas fa-user me-1"></i>Customer *
                                </label>
                                <select asp-for="CustomerId" class="form-select" id="customerSelect" required>
                                    <option value="">-- Select Customer --</option>
                                    @if (Model?.Customers != null)
                                    {
                                        @foreach (var customer in Model.Customers)
                                        {
                                            <option value="@customer.CustomerId"
                                                    data-username="@customer.Username"
                                                    data-email="@customer.Email">
                                                @customer.Name @customer.Surname (@customer.Username)
                                            </option>
                                        }
                                    }
                                </select>
                                <span asp-validation-for="CustomerId" class="text-danger"></span>
                                <div id="customerInfo" class="mt-2" style="display: none;">
                                    <small class="text-muted">
                                        <i class="fas fa-info-circle me-1"></i>
                                        <span id="customerDetails"></span>
                                    </small>
                                </div>
                            </div>

                            <!-- Product Selection -->
                            <div class="col-md-6 mb-3">
                                <label asp-for="ProductId" class="form-label">
                                    <i class="fas fa-box me-1"></i>Product *
                                </label>
                                <select asp-for="ProductId" class="form-select" id="productSelect" required>
                                    <option value="">-- Select Product --</option>
                                    @if (Model?.Products != null)
                                    {
                                        @foreach (var product in Model.Products)
                                        {
                                            <option value="@product.ProductId"
                                                    data-price="@product.Price"
                                                    data-stock="@product.StockAvailable"
                                                    data-name="@product.ProductName">
                                                @product.ProductName - @product.Price.ToString("C")
                                            </option>
                                        }
                                    }
                                </select>
                                <span asp-validation-for="ProductId" class="text-danger"></span>
                                <div id="productInfo" class="mt-2" style="display: none;">
                                    <small class="text-muted">
                                        <i class="fas fa-info-circle me-1"></i>
                                        Stock Available: <span id="stockInfo"></span>
                                    </small>
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <!-- Quantity -->
                            <div class="col-md-4 mb-3">
                                <label asp-for="Quantity" class="form-label">
                                    <i class="fas fa-calculator me-1"></i>Quantity *
                                </label>
                                <input asp-for="Quantity" class="form-control" id="quantityInput"
                                       type="number" min="1" required />
                                <span asp-validation-for="Quantity" class="text-danger"></span>
                                <div id="quantityError" class="text-danger mt-1" style="display: none;">
                                    <small><i class="fas fa-exclamation-triangle me-1"></i>Insufficient stock available</small>
                                </div>
                            </div>

                            <!-- Order Date -->
                            <div class="col-md-4 mb-3">
                                <label asp-for="OrderDate" class="form-label">
                                    <i class="fas fa-calendar me-1"></i>Order Date *
                                </label>
                                <input asp-for="OrderDate" class="form-control" type="date"
                                       value="@DateTime.Now.ToString("yyyy-MM-dd")" required />
                                <span asp-validation-for="OrderDate" class="text-danger"></span>
                            </div>

                            <!-- Status -->
                            <div class="col-md-4 mb-3">
                                <label asp-for="Status" class="form-label">
                                    <i class="fas fa-flag me-1"></i>Status *
                                </label>
                                <select asp-for="Status" class="form-select" required>
                                    <option value="">-- Select Status --</option>
                                    <option value="Pending" selected>Pending</option>
                                    <option value="Processing">Processing</option>
                                    <option value="Completed">Completed</option>
                                    <option value="Cancelled">Cancelled</option>
                                </select>
                                <span asp-validation-for="Status" class="text-danger"></span>
                            </div>
                        </div>

                        <!-- Action Buttons -->
                        <div class="row">
                            <div class="col-12">
                                <hr>
                                <button type="submit" class="btn btn-success me-2" id="submitBtn">
                                    <i class="fas fa-save me-1"></i>Create Order
                                </button>
                                <a asp-action="Index" class="btn btn-secondary">
                                    <i class="fas fa-arrow-left me-1"></i>Back to Orders
                                </a>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <!-- Order Summary Sidebar -->
        <div class="col-lg-4">
            <div class="card">
                <div class="card-header">
                    <h5><i class="fas fa-receipt me-2"></i>Order Summary</h5>
                </div>
                <div class="card-body">
                    <div id="orderSummary">
                        <div class="text-muted text-center py-4">
                            <i class="fas fa-shopping-cart fa-2x mb-3"></i>
                            <p>Select customer and product to see order summary</p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Real-time Pricing Information -->
            <div class="card mt-3">
                <div class="card-header">
                    <h6><i class="fas fa-chart-line me-2"></i>Pricing Information</h6>
                </div>
                <div class="card-body">
                    <div class="row text-center">
                        <div class="col-6">
                            <div class="border rounded p-2">
                                <div class="text-muted small">Unit Price</div>
                                <div class="h5 mb-0" id="unitPrice">-</div>
                            </div>
                        </div>
                        <div class="col-6">
                            <div class="border rounded p-2">
                                <div class="text-muted small">Total Price</div>
                                <div class="h5 mb-0 text-success" id="totalPrice">-</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Modal for error messages -->
<div class="modal fade" id="errorModal" tabindex="-1" aria-labelledby="errorModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title" id="errorModalLabel">Error</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p id="errorModalMessage"></p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>


@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const customerSelect = document.getElementById('customerSelect');
            const productSelect = document.getElementById('productSelect');
            const quantityInput = document.getElementById('quantityInput');
            const customerInfo = document.getElementById('customerInfo');
            const productInfo = document.getElementById('productInfo');
            const quantityError = document.getElementById('quantityError');
            const submitBtn = document.getElementById('submitBtn');

            // Function to show the custom error modal
            function showErrorModal(message) {
                document.getElementById('errorModalMessage').textContent = message;
                const errorModal = new bootstrap.Modal(document.getElementById('errorModal'));
                errorModal.show();
            }

            // Real-time price calculation
            function updateOrderSummary() {
                const selectedCustomer = customerSelect.options[customerSelect.selectedIndex];
                const selectedProduct = productSelect.options[productSelect.selectedIndex];
                const quantity = parseInt(quantityInput.value) || 0;

                if (selectedCustomer.value && selectedProduct.value && quantity > 0) {
                    const unitPrice = parseFloat(selectedProduct.dataset.price);
                    const totalPrice = unitPrice * quantity;
                    const stock = parseInt(selectedProduct.dataset.stock);

                    // Update pricing display
                    document.getElementById('unitPrice').textContent = unitPrice.toLocaleString('en-US', {
                        style: 'currency',
                        currency: 'USD'
                    });
                    document.getElementById('totalPrice').textContent = totalPrice.toLocaleString('en-US', {
                        style: 'currency',
                        currency: 'USD'
                    });

                    // Update order summary
                    document.getElementById('orderSummary').innerHTML = `
                        <div class="mb-3">
                            <strong><i class="fas fa-user me-2"></i>Customer</strong>
                            <div class="text-muted">${selectedCustomer.text}</div>
                        </div>
                        <div class="mb-3">
                            <strong><i class="fas fa-box me-2"></i>Product</strong>
                            <div class="text-muted">${selectedProduct.dataset.name}</div>
                        </div>
                        <hr>
                        <div class="row mb-2">
                            <div class="col">Unit Price:</div>
                            <div class="col text-end">${unitPrice.toLocaleString('en-US', {style: 'currency', currency: 'USD'})}</div>
                        </div>
                        <div class="row mb-2">
                            <div class="col">Quantity:</div>
                            <div class="col text-end">${quantity}</div>
                        </div>
                        <hr>
                        <div class="row">
                            <div class="col"><strong>Total:</strong></div>
                            <div class="col text-end"><strong class="text-success">${totalPrice.toLocaleString('en-US', {style: 'currency', currency: 'USD'})}</strong></div>
                        </div>
                    `;

                    // Validate stock
                    if (quantity > stock) {
                        quantityError.style.display = 'block';
                        quantityInput.classList.add('is-invalid');
                        submitBtn.disabled = true;
                    } else {
                        quantityError.style.display = 'none';
                        quantityInput.classList.remove('is-invalid');
                        submitBtn.disabled = false;
                    }
                } else {
                    document.getElementById('unitPrice').textContent = '-';
                    document.getElementById('totalPrice').textContent = '-';
                    document.getElementById('orderSummary').innerHTML = `
                        <div class="text-muted text-center py-4">
                            <i class="fas fa-shopping-cart fa-2x mb-3"></i>
                            <p>Select customer and product to see order summary</p>
                        </div>
                    `;
                }
            }

            // Customer selection handler
            customerSelect.addEventListener('change', function() {
                const selected = this.options[this.selectedIndex];
                if (selected.value) {
                    document.getElementById('customerDetails').innerHTML = `
                        Username: ${selected.dataset.username} | Email: ${selected.dataset.email}
                    `;
                    customerInfo.style.display = 'block';
                } else {
                    customerInfo.style.display = 'none';
                }
                updateOrderSummary();
            });

            // Product selection handler
            productSelect.addEventListener('change', function() {
                const selected = this.options[this.selectedIndex];
                if (selected.value) {
                    const stock = parseInt(selected.dataset.stock);
                    document.getElementById('stockInfo').innerHTML = `
                        <span class="${stock > 10 ? 'text-success' : stock > 0 ? 'text-warning' : 'text-danger'}">
                            ${stock} units
                        </span>
                    `;
                    productInfo.style.display = 'block';

                    // Set max quantity
                    quantityInput.max = stock;
                } else {
                    productInfo.style.display = 'none';
                    quantityInput.max = '';
                }
                updateOrderSummary();
            });

            // Quantity input handler
            quantityInput.addEventListener('input', updateOrderSummary);

            // Form validation
            document.getElementById('orderForm').addEventListener('submit', function(e) {
                const selectedProduct = productSelect.options[productSelect.selectedIndex];
                const quantity = parseInt(quantityInput.value) || 0;

                if (selectedProduct.value) {
                    const stock = parseInt(selectedProduct.dataset.stock);
                    if (quantity > stock) {
                        e.preventDefault();
                        showErrorModal('Quantity cannot exceed available stock.');
                        return false;
                    }
                }
            });
        });
    </script>
}
